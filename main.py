import pandas as pd
import os
from datetime import datetime, timedelta

# ƒê∆∞·ªùng d·∫´n t·ªõi file Excel
excel_file = "0528_TKB_HK1_NAM_HOC_2025_20261-1.xlsx"

# Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
if os.path.exists(excel_file):
    try:
        # ƒê·ªçc file Excel
        print(f"ƒêang ƒë·ªçc file: {excel_file}")
        print("=" * 50)
        
        # ƒê·ªçc t·∫•t c·∫£ c√°c sheet trong file Excel
        excel_data = pd.ExcelFile(excel_file)
        print(f"C√°c sheet trong file: {excel_data.sheet_names}")
        print("=" * 50)
        
        # X·ª≠ l√Ω sheet TKB CHINH
        if 'TKB CHINH' in excel_data.sheet_names:
            print("\nÔøΩ ƒêang x·ª≠ l√Ω sheet TKB CHINH...")
            
            # ƒê·ªçc sheet TKB CHINH v·ªõi c√°c t√πy ch·ªçn ƒë·ªÉ x·ª≠ l√Ω header
            df_main = pd.read_excel(excel_file, sheet_name='TKB CHINH', header=7)
            
            print(f"S·ªë d√≤ng d·ªØ li·ªáu: {len(df_main)}")
            
            # X·ª≠ l√Ω v√† chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu
            schedule_list = process_schedule_data(df_main)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            df_result = display_schedule_table(schedule_list)
            
            # L∆∞u v√†o file Excel m·ªõi
            if df_result is not None and not df_result.empty:
                save_to_excel(df_result)
                
                # Xu·∫•t m·ªôt s·ªë m·∫´u CSV cho d·ªÖ xem
                print("\nüìÑ M·ªôt s·ªë m·∫´u d·ªØ li·ªáu:")
                print(df_result.head(10)[['L·ªõp', 'M√£ l·ªõp', 'B·∫Øt ƒë·∫ßu', 'K·∫øt th√∫c', 'Th·ª©', 'Gi·∫£ng vi√™n', 'M√¥n h·ªçc']].to_string(index=False))
        
        else:
            print("Kh√¥ng t√¨m th·∫•y sheet 'TKB CHINH'")
            
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc file Excel: {e}")
        print("C√≥ th·ªÉ file b·ªã h·ªèng ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng ƒë√∫ng.")
        
else:
    print(f"Kh√¥ng t√¨m th·∫•y file: {excel_file}")
    print("C√°c file trong th∆∞ m·ª•c hi·ªán t·∫°i:")
    for file in os.listdir("."):
        if file.endswith((".xlsx", ".xls")):
            print(f"  - {file}")

def convert_day_to_vietnamese(day_num):
    """Chuy·ªÉn ƒë·ªïi s·ªë th·ª© sang t√™n th·ª© ti·∫øng Vi·ªát"""
    days = {
        2: "Th·ª© 2",
        3: "Th·ª© 3", 
        4: "Th·ª© 4",
        5: "Th·ª© 5",
        6: "Th·ª© 6",
        7: "Th·ª© 7",
        8: "Ch·ªß nh·∫≠t"
    }
    return days.get(day_num, f"Th·ª© {day_num}")

def calculate_date_range(week_schedule):
    """T√≠nh to√°n ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c d·ª±a tr√™n l·ªãch tu·∫ßn"""
    # Ng√†y b·∫Øt ƒë·∫ßu h·ªçc k·ª≥ (25/08/2025)
    start_date = datetime(2025, 8, 25)
    
    # T√¨m tu·∫ßn ƒë·∫ßu ti√™n c√≥ d·∫•u 'x'
    first_week = None
    last_week = None
    
    week_columns = ['08/25', '09/25', '10/25', '11/25', '12/25']
    
    for i, col in enumerate(week_columns):
        if week_schedule.get(col) == 'x':
            if first_week is None:
                first_week = i
            last_week = i
    
    if first_week is not None and last_week is not None:
        # T√≠nh ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
        start = start_date + timedelta(weeks=first_week)
        end = start_date + timedelta(weeks=last_week + 1)
        return start.strftime("%Y-%m-%d"), end.strftime("%Y-%m-%d")
    
    return "2025-08-25", "2025-12-31"

def process_schedule_data(df):
    """X·ª≠ l√Ω d·ªØ li·ªáu th·ªùi kh√≥a bi·ªÉu v√† chuy·ªÉn ƒë·ªïi sang ƒë·ªãnh d·∫°ng mong mu·ªën"""
    
    # L·ªçc c√°c d√≤ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá (b·ªè qua header v√† d√≤ng tr·ªëng)
    df_clean = df.dropna(subset=['T√™n m√¥n h·ªçc/ h·ªçc ph·∫ßn', 'L·ªõp', 'Gi·∫£ng vi√™n gi·∫£ng d·∫°y'])
    
    # L·ªçc c√°c d√≤ng kh√¥ng ph·∫£i header
    df_clean = df_clean[df_clean['T√™n m√¥n h·ªçc/ h·ªçc ph·∫ßn'] != 'T√™n m√¥n h·ªçc/ h·ªçc ph·∫ßn']
    
    schedule_list = []
    
    for index, row in df_clean.iterrows():
        try:
            # L·∫•y th√¥ng tin c∆° b·∫£n
            class_name = str(row.get('L·ªõp', '')).strip()
            class_code = str(row.get('Nh√≥m', '')).strip() if pd.notna(row.get('Nh√≥m')) else ""
            subject_name = str(row.get('T√™n m√¥n h·ªçc/ h·ªçc ph·∫ßn', '')).strip()
            teacher_name = str(row.get('Gi·∫£ng vi√™n gi·∫£ng d·∫°y', '')).strip()
            course_year = str(row.get('Kh√≥a', '')).strip()
            major = str(row.get('Ng√†nh', '')).strip()
            day_num = row.get('Th·ª©')
            start_period = row.get('Ti·∫øt Bƒê')
            num_periods = row.get('S·ªë ti·∫øt')
            room = str(row.get('Ph√≤ng', '')).strip() if pd.notna(row.get('Ph√≤ng')) else ""
            building = str(row.get('Nh√†', '')).strip() if pd.notna(row.get('Nh√†')) else ""
            credits = row.get('S·ªë TC') if pd.notna(row.get('S·ªë TC')) else ""
            notes = str(row.get('Ghi ch√∫', '')).strip() if pd.notna(row.get('Ghi ch√∫')) else ""
            
            # Chuy·ªÉn ƒë·ªïi th·ª©
            day_name = convert_day_to_vietnamese(day_num) if pd.notna(day_num) else ""
            
            # T√≠nh to√°n ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
            week_data = {
                '08/25': row.get('08/25'),
                '09/25': row.get('09/25'), 
                '10/25': row.get('10/25'),
                '11/25': row.get('11/25'),
                '12/25': row.get('12/25')
            }
            start_date, end_date = calculate_date_range(week_data)
            
            # T·∫°o th·ªùi gian h·ªçc
            time_slot = ""
            if pd.notna(start_period) and pd.notna(num_periods):
                end_period = int(start_period) + int(num_periods) - 1
                time_slot = f"Ti·∫øt {int(start_period)}-{end_period}"
            
            # T·∫°o ƒë·ªãa ƒëi·ªÉm
            location = ""
            if room and building:
                location = f"Ph√≤ng {room}, Nh√† {building}"
            elif room:
                location = f"Ph√≤ng {room}"
            elif building:
                location = f"Nh√† {building}"
            
            schedule_item = {
                'L·ªõp': class_name,
                'M√£ l·ªõp': class_code,
                'B·∫Øt ƒë·∫ßu': start_date,
                'K·∫øt th√∫c': end_date,
                'Th·ª©': day_name,
                'Gi·∫£ng vi√™n': teacher_name,
                'M√¥n h·ªçc': subject_name,
                'Kh√≥a': course_year,
                'Ng√†nh': major,
                'Th·ªùi gian': time_slot,
                'ƒê·ªãa ƒëi·ªÉm': location,
                'S·ªë t√≠n ch·ªâ': credits,
                'Ghi ch√∫': notes
            }
            
            schedule_list.append(schedule_item)
            
        except Exception as e:
            print(f"L·ªói x·ª≠ l√Ω d√≤ng {index}: {e}")
            continue
    
    return schedule_list

def display_schedule_table(schedule_list):
    """Hi·ªÉn th·ªã b·∫£ng th·ªùi kh√≥a bi·ªÉu theo ƒë·ªãnh d·∫°ng y√™u c·∫ßu"""
    if not schedule_list:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã")
        return
    
    # T·∫°o DataFrame t·ª´ danh s√°ch
    df_result = pd.DataFrame(schedule_list)
    
    # Hi·ªÉn th·ªã b·∫£ng ƒë·∫πp
    print("\n" + "="*150)
    print("üìö TH·ªúI KH√ìA BI·ªÇU H·ªåC K·ª≤ I NƒÇM H·ªåC 2025-2026")
    print("="*150)
    
    # Hi·ªÉn th·ªã v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp
    pd.set_option('display.max_columns', None)
    pd.set_option('display.width', None)
    pd.set_option('display.max_colwidth', 30)
    
    print(df_result.to_string(index=False))
    
    print(f"\nüìä T·ªïng s·ªë l·ªõp h·ªçc ph·∫ßn: {len(schedule_list)}")
    
    # Th·ªëng k√™ theo ng√†nh
    if 'Ng√†nh' in df_result.columns:
        major_stats = df_result['Ng√†nh'].value_counts()
        print("\nüìà Th·ªëng k√™ theo ng√†nh:")
        for major, count in major_stats.items():
            print(f"  - {major}: {count} l·ªõp")
    
    # Th·ªëng k√™ theo kh√≥a
    if 'Kh√≥a' in df_result.columns:
        year_stats = df_result['Kh√≥a'].value_counts()
        print("\nüìÖ Th·ªëng k√™ theo kh√≥a:")
        for year, count in year_stats.items():
            print(f"  - Kh√≥a {year}: {count} l·ªõp")
    
    return df_result

def save_to_excel(df_result, output_file="tkb_formatted.xlsx"):
    """L∆∞u k·∫øt qu·∫£ v√†o file Excel m·ªõi"""
    try:
        df_result.to_excel(output_file, index=False, engine='openpyxl')
        print(f"\nüíæ ƒê√£ l∆∞u d·ªØ li·ªáu v√†o file: {output_file}")
    except Exception as e:
        print(f"L·ªói khi l∆∞u file: {e}")