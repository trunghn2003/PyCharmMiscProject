import pandas as pd
import os
from datetime import datetime, timedelta

def convert_day_to_vietnamese(day_num):
    """Chuy·ªÉn ƒë·ªïi s·ªë th·ª© sang t√™n th·ª© ti·∫øng Vi·ªát"""
    if pd.isna(day_num):
        return ""
    days = {
        2: "2",
        3: "3", 
        4: "4",
        5: "5",
        6: "6",
        7: "7",
        8: "CN"
    }
    return days.get(int(day_num), f"Th·ª© {int(day_num)}")

def calculate_date_range_improved(week_schedule):
    """T√≠nh to√°n ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c d·ª±a tr√™n l·ªãch tu·∫ßn - CH√çNH X√ÅC THEO TH·ª∞C T·∫æ"""
    
    # √Ånh x·∫° CHI TI·∫æT t·ª´ng c·ªôt ƒë·∫øn ng√†y c·ª• th·ªÉ d·ª±a tr√™n c·∫•u tr√∫c Excel th·ª±c t·∫ø
    detailed_week_mapping = {
        # Th√°ng 8/2025
        '08/25': (2025, 8, 11, 17, 1),      # Tu·∫ßn 1: 11-17/8
        'Unnamed: 18': (2025, 8, 18, 24, 2), # Tu·∫ßn 2: 18-24/8  
        'Unnamed: 19': (2025, 8, 25, 31, 3), # Tu·∫ßn 3: 25-31/8
        
        # Th√°ng 9/2025
        '09/25': (2025, 9, 1, 7, 4),        # Tu·∫ßn 4: 1-7/9
        'Unnamed: 21': (2025, 9, 8, 14, 5), # Tu·∫ßn 5: 8-14/9
        'Unnamed: 22': (2025, 9, 15, 21, 6), # Tu·∫ßn 6: 15-21/9
        'Unnamed: 23': (2025, 9, 22, 28, 7), # Tu·∫ßn 7: 22-28/9
        'Unnamed: 24': (2025, 9, 29, 30, 8), # Tu·∫ßn 8: 29-30/9 (chuy·ªÉn sang th√°ng 10)
        
        # Th√°ng 10/2025
        '10/25': (2025, 10, 6, 12, 9),      # Tu·∫ßn 9: 6-12/10
        'Unnamed: 26': (2025, 10, 13, 19, 10), # Tu·∫ßn 10: 13-19/10
        'Unnamed: 27': (2025, 10, 20, 26, 11), # Tu·∫ßn 11: 20-26/10
        'Unnamed: 28': (2025, 10, 27, 31, 12), # Tu·∫ßn 12: 27-31/10 (chuy·ªÉn sang th√°ng 11)
        
        # Th√°ng 11/2025
        '11/25': (2025, 11, 3, 9, 13),       # Tu·∫ßn 13: 3-9/11
        'Unnamed: 30': (2025, 11, 10, 16, 14), # Tu·∫ßn 14: 10-16/11
        'Unnamed: 31': (2025, 11, 17, 23, 15), # Tu·∫ßn 15: 17-23/11
        'Unnamed: 32': (2025, 11, 24, 30, 16), # Tu·∫ßn 16: 24-30/11
        
        # Th√°ng 12/2025
        '12/25': (2025, 12, 1, 7, 17),       # Tu·∫ßn 17: 1-7/12
    }
    
    # T√¨m t·∫•t c·∫£ c√°c kho·∫£ng th·ªùi gian c√≥ 'x' v√† s·ªë tu·∫ßn t∆∞∆°ng ·ª©ng
    active_periods = []
    active_weeks = []  # Danh s√°ch c√°c tu·∫ßn h·ªçc
    
    for col_name, (year, month, start_day, end_day, week_num) in detailed_week_mapping.items():
        if col_name in week_schedule:
            value = week_schedule[col_name]
            if pd.notna(value) and 'x' in str(value).lower():
                try:
                    start_date = datetime(year, month, start_day)
                    end_date = datetime(year, month, end_day)
                    active_periods.append((start_date, end_date))
                    active_weeks.append(week_num)  # Th√™m s·ªë tu·∫ßn
                except ValueError:
                    continue
    
    if not active_periods:
        return "2025-08-11", "2025-09-14", []  # Tr·∫£ v·ªÅ ng√†y m·∫∑c ƒë·ªãnh v√† danh s√°ch tu·∫ßn tr·ªëng
    
    # S·∫Øp x·∫øp v√† l·∫•y ng√†y ƒë·∫ßu ti√™n v√† cu·ªëi c√πng
    active_periods.sort(key=lambda x: x[0])
    overall_start = active_periods[0][0]
    overall_end = active_periods[-1][1]
    
    # S·∫Øp x·∫øp danh s√°ch tu·∫ßn
    active_weeks.sort()
    
    return overall_start.strftime("%Y-%m-%d"), overall_end.strftime("%Y-%m-%d"), active_weeks

def process_schedule_data_improved(df):
    """X·ª≠ l√Ω d·ªØ li·ªáu th·ªùi kh√≥a bi·ªÉu - L·∫§Y T·∫§T C·∫¢ D·ªÆ LI·ªÜU V√Ä TH√äM TU·∫¶N H·ªåC"""
    
    # Kh√¥ng l·ªçc g√¨ c·∫£ - l·∫•y T·∫§T C·∫¢ d·ªØ li·ªáu
    print(f"üìä X·ª≠ l√Ω T·∫§T C·∫¢ {len(df)} d√≤ng d·ªØ li·ªáu g·ªëc")
    
    # Danh s√°ch t·∫•t c·∫£ c√°c c·ªôt tu·∫ßn (bao g·ªìm c·∫£ Unnamed)
    all_week_cols = ['08/25', 'Unnamed: 18', 'Unnamed: 19',
                     '09/25', 'Unnamed: 21', 'Unnamed: 22', 'Unnamed: 23', 'Unnamed: 24',
                     '10/25', 'Unnamed: 26', 'Unnamed: 27', 'Unnamed: 28',
                     '11/25', 'Unnamed: 30', 'Unnamed: 31', 'Unnamed: 32',
                     '12/25']
    
    schedule_list = []
    
    for index, row in df.iterrows():
        try:
            # L·∫•y T·∫§T C·∫¢ th√¥ng tin, k·ªÉ c·∫£ khi thi·∫øu
            class_name = str(row.get('L·ªõp', '')).strip() if pd.notna(row.get('L·ªõp')) else ""
            class_code = str(row.get('Nh√≥m', '')).strip() if pd.notna(row.get('Nh√≥m')) else ""
            subject_name = str(row.get('T√™n m√¥n h·ªçc/ h·ªçc ph·∫ßn', '')).strip() if pd.notna(row.get('T√™n m√¥n h·ªçc/ h·ªçc ph·∫ßn')) else ""
            teacher_name = str(row.get('Gi·∫£ng vi√™n gi·∫£ng d·∫°y', '')).strip() if pd.notna(row.get('Gi·∫£ng vi√™n gi·∫£ng d·∫°y')) else ""
            course_year = str(row.get('Kh√≥a', '')).strip() if pd.notna(row.get('Kh√≥a')) else ""
            major = str(row.get('Ng√†nh', '')).strip() if pd.notna(row.get('Ng√†nh')) else ""
            day_num = row.get('Th·ª©')
            start_period = row.get('Ti·∫øt Bƒê')
            num_periods = row.get('S·ªë ti·∫øt')
            room = str(row.get('Ph√≤ng', '')).strip() if pd.notna(row.get('Ph√≤ng')) else ""
            building = str(row.get('Nh√†', '')).strip() if pd.notna(row.get('Nh√†')) else ""
            credits = row.get('S·ªë TC') if pd.notna(row.get('S·ªë TC')) else ""
            notes = str(row.get('Ghi ch√∫', '')).strip() if pd.notna(row.get('Ghi ch√∫')) else ""
            subject_code = str(row.get('M√£ m√¥n h·ªçc', '')).strip() if pd.notna(row.get('M√£ m√¥n h·ªçc')) else ""
            row_number = str(row.get('TT', '')).strip() if pd.notna(row.get('TT')) else ""
            
            # Chuy·ªÉn ƒë·ªïi th·ª©
            day_name = convert_day_to_vietnamese(day_num)
            
            # T√≠nh to√°n ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c v·ªõi T·∫§T C·∫¢ c√°c c·ªôt
            week_data = {}
            for week_col in all_week_cols:
                if week_col in df.columns:
                    week_data[week_col] = row.get(week_col)
            
            start_date, end_date, week_numbers = calculate_date_range_improved(week_data)
            
            # T·∫°o th·ªùi gian h·ªçc
            time_slot = ""
            if pd.notna(start_period) and pd.notna(num_periods):
                try:
                    end_period = int(start_period) + int(num_periods) - 1
                    time_slot = f"{int(start_period)}-{end_period}"
                except:
                    time_slot = f"{start_period}"
            
            # T·∫°o ƒë·ªãa ƒëi·ªÉm
            location = ""
            if room and building:
                location = f"Ph√≤ng {room}, Nh√† {building}"
            elif room:
                location = f"Ph√≤ng {room}"
            elif building:
                location = f"Nh√† {building}"
            
            # T·∫°o m√¥ t·∫£ l·ªãch h·ªçc t·ª´ t·∫•t c·∫£ c·ªôt tu·∫ßn
            schedule_pattern = ""
            active_weeks = []
            for col in all_week_cols:
                if col in week_data and pd.notna(week_data[col]) and 'x' in str(week_data[col]).lower():
                    active_weeks.append(col)
            if active_weeks:
                schedule_pattern = ", ".join(active_weeks)
            
            # T·∫°o chu·ªói tu·∫ßn h·ªçc
            week_list = ""
            if week_numbers:
                week_list = ", ".join([f"{w}" for w in week_numbers])
                
            schedule_item = {
                'STT': row_number,
                'L·ªõp': class_name,
                'M√£ l·ªõp': class_code,
                'B·∫Øt ƒë·∫ßu': start_date,
                'K·∫øt th√∫c': end_date,
                'Th·ª©': day_name,
                'Gi·∫£ng vi√™n': teacher_name,
                'M√¥n h·ªçc': subject_name,
                'M√£ m√¥n h·ªçc': subject_code,
                'Kh√≥a': course_year,
                'Ng√†nh': major,
                'Th·ªùi gian': time_slot,
                'ƒê·ªãa ƒëi·ªÉm': location,
                'S·ªë t√≠n ch·ªâ': credits,
                'Ghi ch√∫': notes,
                'Tu·∫ßn h·ªçc': week_list,
            }
            
            # Th√™m t·∫•t c·∫£ c√°c c·ªôt tu·∫ßn g·ªëc ƒë·ªÉ tham kh·∫£o
            for col in all_week_cols:
                if col in df.columns:
                    schedule_item[f'G·ªëc_{col}'] = row.get(col)
            
            schedule_list.append(schedule_item)
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω d√≤ng {index}: {e}")
            # V·∫´n th√™m d√≤ng l·ªói ƒë·ªÉ kh√¥ng m·∫•t d·ªØ li·ªáu
            schedule_item = {
                'STT': index,
                'L·ªõp': 'L·ªói',
                'M√£ l·ªõp': 'L·ªói',
                'B·∫Øt ƒë·∫ßu': 'L·ªói',
                'K·∫øt th√∫c': 'L·ªói',
                'Th·ª©': 'L·ªói',
                'Gi·∫£ng vi√™n': 'L·ªói',
                'M√¥n h·ªçc': f'L·ªói d√≤ng {index}: {str(e)}',
                'M√£ m√¥n h·ªçc': 'L·ªói',
                'Kh√≥a': 'L·ªói',
                'Ng√†nh': 'L·ªói',
                'Th·ªùi gian': 'L·ªói',
                'ƒê·ªãa ƒëi·ªÉm': 'L·ªói',
                'S·ªë t√≠n ch·ªâ': 'L·ªói',
                'Ghi ch√∫': 'L·ªói',
                'Tu·∫ßn h·ªçc': 'L·ªói',
            }
            schedule_list.append(schedule_item)
            continue
    
    return schedule_list

def display_schedule_table(schedule_list):
    """Hi·ªÉn th·ªã b·∫£ng th·ªùi kh√≥a bi·ªÉu theo ƒë·ªãnh d·∫°ng y√™u c·∫ßu"""
    if not schedule_list:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã")
        return None
    
    # T·∫°o DataFrame t·ª´ danh s√°ch
    df_result = pd.DataFrame(schedule_list)
    
    # Hi·ªÉn th·ªã b·∫£ng ƒë·∫πp
    print("\n" + "="*150)
    print("üìö TH·ªúI KH√ìA BI·ªÇU H·ªåC K·ª≤ I NƒÇM H·ªåC 2025-2026 (ƒê√É S·ª¨A)")
    print("="*150)
    
    # Hi·ªÉn th·ªã v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp - ch·ªâ 20 d√≤ng ƒë·∫ßu ƒë·ªÉ tr√°nh qu√° d√†i
    print("üìÑ 20 D√íNG ƒê·∫¶U:")
    print(df_result.head(20).to_string(index=False))
    
    print(f"\nüìä T·ªïng s·ªë l·ªõp h·ªçc ph·∫ßn: {len(schedule_list)}")
    
    # Th·ªëng k√™ theo ng√†nh
    if 'Ng√†nh' in df_result.columns and not df_result['Ng√†nh'].empty:
        major_stats = df_result['Ng√†nh'].value_counts().head(10)
        print("\nüìà Top 10 ng√†nh c√≥ nhi·ªÅu l·ªõp nh·∫•t:")
        for major, count in major_stats.items():
            print(f"  - {major}: {count} l·ªõp")
    
    # Th·ªëng k√™ theo kh√≥a
    if 'Kh√≥a' in df_result.columns and not df_result['Kh√≥a'].empty:
        year_stats = df_result['Kh√≥a'].value_counts()
        print("\nüìÖ Th·ªëng k√™ theo kh√≥a:")
        for year, count in year_stats.items():
            print(f"  - Kh√≥a {year}: {count} l·ªõp")
    
    return df_result

def save_to_excel(df_result, output_file="tkb_full_data.xlsx"):
    """L∆∞u T·∫§T C·∫¢ d·ªØ li·ªáu v√†o file Excel m·ªõi"""
    try:
        df_result.to_excel(output_file, index=False, engine='openpyxl')
        print(f"\nüíæ ƒê√£ l∆∞u T·∫§T C·∫¢ {len(df_result)} d√≤ng d·ªØ li·ªáu v√†o file: {output_file}")
    except Exception as e:
        print(f"L·ªói khi l∆∞u file: {e}")

def get_period_description_correct(week_data):
    """T·∫°o m√¥ t·∫£ th·ªùi gian h·ªçc d·ª±a tr√™n c√°c tu·∫ßn c√≥ 'x' - ƒê√öNG THEO NG√ÄY TH·ª∞C T·∫æ"""
    period_descriptions = []
    
    week_periods = {
        '08/25': "th√°ng 8/2025 (ng√†y 11-31)",
        '09/25': "th√°ng 9/2025 (ng√†y 1-28)", 
        '10/25': "th√°ng 9-10/2025 (ng√†y 29/9-26/10)",
        '11/25': "th√°ng 10-11/2025 (ng√†y 27/10-23/11)",
        '12/25': "th√°ng 11-12/2025 (ng√†y 24/11-7/12)"
    }
    
    for week_col, description in week_periods.items():
        if str(week_data.get(week_col, '')).lower() == 'x':
            period_descriptions.append(description)
    
    if period_descriptions:
        return "T·ª´ " + ", ".join(period_descriptions)
    return "Kh√¥ng x√°c ƒë·ªãnh"

def main():
    """H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω file Excel - PHI√äN B·∫¢N ƒê√É S·ª¨A"""
    # ƒê∆∞·ªùng d·∫´n t·ªõi file Excel
    excel_file = "0528_TKB_HK1_NAM_HOC_2025_20261-1.xlsx"
    
    # Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
    if os.path.exists(excel_file):
        try:
            # ƒê·ªçc file Excel
            print(f"ƒêang ƒë·ªçc file: {excel_file}")
            print("=" * 50)
            
            # ƒê·ªçc t·∫•t c·∫£ c√°c sheet trong file Excel
            excel_data = pd.ExcelFile(excel_file)
            print(f"C√°c sheet trong file: {excel_data.sheet_names}")
            print("=" * 50)
            
            # X·ª≠ l√Ω sheet TKB CHINH
            if 'TKB CHINH' in excel_data.sheet_names:
                print("\nüîÑ ƒêang x·ª≠ l√Ω sheet TKB CHINH...")
                
                # ƒê·ªçc sheet TKB CHINH v·ªõi header ƒë√∫ng
                df_main = pd.read_excel(excel_file, sheet_name='TKB CHINH', header=8)
                
                print(f"S·ªë d√≤ng d·ªØ li·ªáu ban ƒë·∫ßu: {len(df_main)}")
                
                # X·ª≠ l√Ω v√† chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu v·ªõi logic m·ªõi
                schedule_list = process_schedule_data_improved(df_main)
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                df_result = display_schedule_table(schedule_list)
                
                # L∆∞u v√†o file Excel m·ªõi
                if df_result is not None and not df_result.empty:
                    save_to_excel(df_result)
                    
                    # Xu·∫•t m·∫´u d·ªØ li·ªáu theo format y√™u c·∫ßu B√åNH TH∆Ø·ªúNG
                    print("\nüìÑ B·∫¢NG TH·ªúI KH√ìA BI·ªÇU THEO ƒê·ªäNH D·∫†NG Y√äU C·∫¶U:")
                    print("-" * 150)
                    print(f"{'L·ªõp':<8} | {'M√£ l·ªõp':<8} | {'B·∫Øt ƒë·∫ßu':<12} | {'K·∫øt th√∫c':<12} | {'Th·ª©':<10} | {'Tu·∫ßn h·ªçc':<25} | {'Gi·∫£ng vi√™n':<20} | {'M√¥n h·ªçc'}")
                    print("-" * 150)
                    
                    for i, row in df_result.head(15).iterrows():
                        subject = row['M√¥n h·ªçc'][:40] + "..." if len(str(row['M√¥n h·ªçc'])) > 40 else row['M√¥n h·ªçc']
                        weeks = row['Tu·∫ßn h·ªçc'][:23] + "..." if len(str(row['Tu·∫ßn h·ªçc'])) > 23 else row['Tu·∫ßn h·ªçc']
                        print(f"{str(row['L·ªõp']):<8} | {str(row['M√£ l·ªõp']):<8} | {row['B·∫Øt ƒë·∫ßu']:<12} | {row['K·∫øt th√∫c']:<12} | {str(row['Th·ª©']):<10} | {weeks:<25} | {str(row['Gi·∫£ng vi√™n'])[:20]:<20} | {subject}")
                    
                    if len(df_result) > 15:
                        print(f"... v√† {len(df_result) - 15} d√≤ng n·ªØa")
                        
                    # Ki·ªÉm tra m·ªôt v√†i v√≠ d·ª• v·ªÅ th·ªùi gian V√Ä TU·∫¶N H·ªåC
                    print("\nüïê Ki·ªÉm tra th·ªùi gian v√† tu·∫ßn h·ªçc c·ªßa m·ªôt v√†i l·ªõp:")
                    sample_classes = df_result.head(5)
                    for i, row in sample_classes.iterrows():
                        print(f"  {row['L·ªõp']} - {row['M√¥n h·ªçc'][:30]}: {row['B·∫Øt ƒë·∫ßu']} ƒë·∫øn {row['K·∫øt th√∫c']}")
                        print(f"    ‚û§ {row['Tu·∫ßn h·ªçc']}")
                        print()
            
            else:
                print("Kh√¥ng t√¨m th·∫•y sheet 'TKB CHINH'")
                
        except Exception as e:
            print(f"L·ªói khi ƒë·ªçc file Excel: {e}")
            import traceback
            traceback.print_exc()
            
    else:
        print(f"Kh√¥ng t√¨m th·∫•y file: {excel_file}")
        print("C√°c file trong th∆∞ m·ª•c hi·ªán t·∫°i:")
        for file in os.listdir("."):
            if file.endswith((".xlsx", ".xls")):
                print(f"  - {file}")

if __name__ == "__main__":
    main()
