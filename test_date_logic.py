import pandas as pd
from datetime import datetime, timedelta

def calculate_date_range_correct(week_schedule):
    """T√≠nh to√°n ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c d·ª±a tr√™n l·ªãch tu·∫ßn - THEO NG√ÄY TH·ª∞C T·∫æ"""
    
    # C√°c tu·∫ßn trong h·ªçc k·ª≥ v·ªõi ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c TH·ª∞C T·∫æ theo file Excel
    week_periods = {
        '08/25': {'start': datetime(2025, 8, 11), 'end': datetime(2025, 8, 17)},    # Tu·∫ßn 11-17/8
        '09/25': {'start': datetime(2025, 8, 18), 'end': datetime(2025, 8, 24)},    # Tu·∫ßn 18-24/8  
        '10/25': {'start': datetime(2025, 8, 25), 'end': datetime(2025, 8, 31)},    # Tu·∫ßn 25-31/8
        '11/25': {'start': datetime(2025, 9, 1), 'end': datetime(2025, 9, 7)},      # Tu·∫ßn 1-7/9
        '12/25': {'start': datetime(2025, 9, 8), 'end': datetime(2025, 9, 14)},     # Tu·∫ßn 8-14/9
    }
    
    # T√¨m tu·∫ßn ƒë·∫ßu ti√™n v√† cu·ªëi c√πng c√≥ d·∫•u 'x'
    first_week_start = None
    last_week_end = None
    
    for week_col, period in week_periods.items():
        if str(week_schedule.get(week_col, '')).lower() == 'x':
            if first_week_start is None:
                first_week_start = period['start']
            last_week_end = period['end']
    
    if first_week_start and last_week_end:
        return first_week_start.strftime("%Y-%m-%d"), last_week_end.strftime("%Y-%m-%d")
    
    return "2025-08-11", "2025-09-14"

def get_period_description_correct(week_data):
    """T·∫°o m√¥ t·∫£ th·ªùi gian h·ªçc d·ª±a tr√™n c√°c tu·∫ßn c√≥ 'x' - ƒê√öNG THEO NG√ÄY TH·ª∞C T·∫æ"""
    period_descriptions = []
    
    week_periods = {
        '08/25': "tu·∫ßn 11-17/8/2025",
        '09/25': "tu·∫ßn 18-24/8/2025", 
        '10/25': "tu·∫ßn 25-31/8/2025",
        '11/25': "tu·∫ßn 1-7/9/2025",
        '12/25': "tu·∫ßn 8-14/9/2025"
    }
    
    for week_col, description in week_periods.items():
        if str(week_data.get(week_col, '')).lower() == 'x':
            period_descriptions.append(description)
    
    if period_descriptions:
        return "T·ª´ " + ", ".join(period_descriptions)
    return "Kh√¥ng x√°c ƒë·ªãnh"

# Test c√°c tr∆∞·ªùng h·ª£p
print("üß™ KI·ªÇM TRA LOGIC T√çNH NG√ÄY M·ªöI:")
print("=" * 50)

test_cases = [
    # Test case 1: Ch·ªâ c√≥ tu·∫ßn ƒë·∫ßu
    {'08/25': 'x', '09/25': '', '10/25': '', '11/25': '', '12/25': ''},
    # Test case 2: C√≥ 2 tu·∫ßn li√™n ti·∫øp
    {'08/25': 'x', '09/25': 'x', '10/25': '', '11/25': '', '12/25': ''},
    # Test case 3: C√≥ 3 tu·∫ßn
    {'08/25': 'x', '09/25': 'x', '10/25': 'x', '11/25': '', '12/25': ''},
    # Test case 4: C√≥ tu·∫ßn gi·ªØa v√† cu·ªëi
    {'08/25': '', '09/25': 'x', '10/25': '', '11/25': 'x', '12/25': ''},
    # Test case 5: T·∫•t c·∫£ c√°c tu·∫ßn
    {'08/25': 'x', '09/25': 'x', '10/25': 'x', '11/25': 'x', '12/25': 'x'},
]

for i, test_case in enumerate(test_cases, 1):
    start_date, end_date = calculate_date_range_correct(test_case)
    description = get_period_description_correct(test_case)
    
    print(f"Test {i}:")
    print(f"  Input: {test_case}")
    print(f"  Ng√†y: {start_date} ƒë·∫øn {end_date}")
    print(f"  M√¥ t·∫£: {description}")
    print("-" * 30)
